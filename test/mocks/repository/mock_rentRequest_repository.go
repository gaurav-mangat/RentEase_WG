// Code generated by MockGen. DO NOT EDIT.
// Source: C:\Users\gmangat\RentEase\internal\domain\interfaces\rentRequest_repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	entities "rentease/internal/domain/entities"

	gomock "github.com/golang/mock/gomock"
)

// MockRequestRepo is a mock of RequestRepo interface.
type MockRequestRepo struct {
	ctrl     *gomock.Controller
	recorder *MockRequestRepoMockRecorder
}

// MockRequestRepoMockRecorder is the mock recorder for MockRequestRepo.
type MockRequestRepoMockRecorder struct {
	mock *MockRequestRepo
}

// NewMockRequestRepo creates a new mock instance.
func NewMockRequestRepo(ctrl *gomock.Controller) *MockRequestRepo {
	mock := &MockRequestRepo{ctrl: ctrl}
	mock.recorder = &MockRequestRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRequestRepo) EXPECT() *MockRequestRepoMockRecorder {
	return m.recorder
}

// FindByLandlordName mocks base method.
func (m *MockRequestRepo) FindByLandlordName(ctx context.Context, landlordName string) ([]entities.Request, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByLandlordName", ctx, landlordName)
	ret0, _ := ret[0].([]entities.Request)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByLandlordName indicates an expected call of FindByLandlordName.
func (mr *MockRequestRepoMockRecorder) FindByLandlordName(ctx, landlordName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByLandlordName", reflect.TypeOf((*MockRequestRepo)(nil).FindByLandlordName), ctx, landlordName)
}

// FindByTenantUsername mocks base method.
func (m *MockRequestRepo) FindByTenantUsername(ctx context.Context, tenantUsername string) ([]entities.Request, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByTenantUsername", ctx, tenantUsername)
	ret0, _ := ret[0].([]entities.Request)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByTenantUsername indicates an expected call of FindByTenantUsername.
func (mr *MockRequestRepoMockRecorder) FindByTenantUsername(ctx, tenantUsername interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByTenantUsername", reflect.TypeOf((*MockRequestRepo)(nil).FindByTenantUsername), ctx, tenantUsername)
}

// SaveRequest mocks base method.
func (m *MockRequestRepo) SaveRequest(request entities.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveRequest", request)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveRequest indicates an expected call of SaveRequest.
func (mr *MockRequestRepoMockRecorder) SaveRequest(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveRequest", reflect.TypeOf((*MockRequestRepo)(nil).SaveRequest), request)
}

// UpdateRequest mocks base method.
func (m *MockRequestRepo) UpdateRequest(request entities.Request, status string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRequest", request, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRequest indicates an expected call of UpdateRequest.
func (mr *MockRequestRepoMockRecorder) UpdateRequest(request, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRequest", reflect.TypeOf((*MockRequestRepo)(nil).UpdateRequest), request, status)
}
